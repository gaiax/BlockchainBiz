// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AuthorizationCanceled extends ethereum.Event {
  get params(): AuthorizationCanceled__Params {
    return new AuthorizationCanceled__Params(this);
  }
}

export class AuthorizationCanceled__Params {
  _event: AuthorizationCanceled;

  constructor(event: AuthorizationCanceled) {
    this._event = event;
  }

  get authorizer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nonce(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class AuthorizationUsed extends ethereum.Event {
  get params(): AuthorizationUsed__Params {
    return new AuthorizationUsed__Params(this);
  }
}

export class AuthorizationUsed__Params {
  _event: AuthorizationUsed;

  constructor(event: AuthorizationUsed) {
    this._event = event;
  }

  get authorizer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nonce(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class Blocklisted extends ethereum.Event {
  get params(): Blocklisted__Params {
    return new Blocklisted__Params(this);
  }
}

export class Blocklisted__Params {
  _event: Blocklisted;

  constructor(event: Blocklisted) {
    this._event = event;
  }

  get _account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class BlocklisterChanged extends ethereum.Event {
  get params(): BlocklisterChanged__Params {
    return new BlocklisterChanged__Params(this);
  }
}

export class BlocklisterChanged__Params {
  _event: BlocklisterChanged;

  constructor(event: BlocklisterChanged) {
    this._event = event;
  }

  get newBlocklister(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Burn extends ethereum.Event {
  get params(): Burn__Params {
    return new Burn__Params(this);
  }
}

export class Burn__Params {
  _event: Burn;

  constructor(event: Burn) {
    this._event = event;
  }

  get burner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Mint extends ethereum.Event {
  get params(): Mint__Params {
    return new Mint__Params(this);
  }
}

export class Mint__Params {
  _event: Mint;

  constructor(event: Mint) {
    this._event = event;
  }

  get minter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MinterAdminChanged extends ethereum.Event {
  get params(): MinterAdminChanged__Params {
    return new MinterAdminChanged__Params(this);
  }
}

export class MinterAdminChanged__Params {
  _event: MinterAdminChanged;

  constructor(event: MinterAdminChanged) {
    this._event = event;
  }

  get newMinterAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class MinterConfigured extends ethereum.Event {
  get params(): MinterConfigured__Params {
    return new MinterConfigured__Params(this);
  }
}

export class MinterConfigured__Params {
  _event: MinterConfigured;

  constructor(event: MinterConfigured) {
    this._event = event;
  }

  get minter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get minterAllowedAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MinterRemoved extends ethereum.Event {
  get params(): MinterRemoved__Params {
    return new MinterRemoved__Params(this);
  }
}

export class MinterRemoved__Params {
  _event: MinterRemoved;

  constructor(event: MinterRemoved) {
    this._event = event;
  }

  get oldMinter(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Pause extends ethereum.Event {
  get params(): Pause__Params {
    return new Pause__Params(this);
  }
}

export class Pause__Params {
  _event: Pause;

  constructor(event: Pause) {
    this._event = event;
  }
}

export class PauserChanged extends ethereum.Event {
  get params(): PauserChanged__Params {
    return new PauserChanged__Params(this);
  }
}

export class PauserChanged__Params {
  _event: PauserChanged;

  constructor(event: PauserChanged) {
    this._event = event;
  }

  get newAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RescuerChanged extends ethereum.Event {
  get params(): RescuerChanged__Params {
    return new RescuerChanged__Params(this);
  }
}

export class RescuerChanged__Params {
  _event: RescuerChanged;

  constructor(event: RescuerChanged) {
    this._event = event;
  }

  get newRescuer(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UnBlocklisted extends ethereum.Event {
  get params(): UnBlocklisted__Params {
    return new UnBlocklisted__Params(this);
  }
}

export class UnBlocklisted__Params {
  _event: UnBlocklisted;

  constructor(event: UnBlocklisted) {
    this._event = event;
  }

  get _account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Unpause extends ethereum.Event {
  get params(): Unpause__Params {
    return new Unpause__Params(this);
  }
}

export class Unpause__Params {
  _event: Unpause;

  constructor(event: Unpause) {
    this._event = event;
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class JPYC extends ethereum.SmartContract {
  static bind(address: Address): JPYC {
    return new JPYC("JPYC", address);
  }

  CANCEL_AUTHORIZATION_TYPEHASH(): Bytes {
    let result = super.call(
      "CANCEL_AUTHORIZATION_TYPEHASH",
      "CANCEL_AUTHORIZATION_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_CANCEL_AUTHORIZATION_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CANCEL_AUTHORIZATION_TYPEHASH",
      "CANCEL_AUTHORIZATION_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PERMIT_TYPEHASH(): Bytes {
    let result = super.call(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_PERMIT_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  RECEIVE_WITH_AUTHORIZATION_TYPEHASH(): Bytes {
    let result = super.call(
      "RECEIVE_WITH_AUTHORIZATION_TYPEHASH",
      "RECEIVE_WITH_AUTHORIZATION_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_RECEIVE_WITH_AUTHORIZATION_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "RECEIVE_WITH_AUTHORIZATION_TYPEHASH",
      "RECEIVE_WITH_AUTHORIZATION_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  TRANSFER_WITH_AUTHORIZATION_TYPEHASH(): Bytes {
    let result = super.call(
      "TRANSFER_WITH_AUTHORIZATION_TYPEHASH",
      "TRANSFER_WITH_AUTHORIZATION_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_TRANSFER_WITH_AUTHORIZATION_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "TRANSFER_WITH_AUTHORIZATION_TYPEHASH",
      "TRANSFER_WITH_AUTHORIZATION_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  _domainSeparatorV4(): Bytes {
    let result = super.call(
      "_domainSeparatorV4",
      "_domainSeparatorV4():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try__domainSeparatorV4(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "_domainSeparatorV4",
      "_domainSeparatorV4():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, value: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  authorizationState(authorizer: Address, nonce: Bytes): boolean {
    let result = super.call(
      "authorizationState",
      "authorizationState(address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(authorizer),
        ethereum.Value.fromFixedBytes(nonce)
      ]
    );

    return result[0].toBoolean();
  }

  try_authorizationState(
    authorizer: Address,
    nonce: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "authorizationState",
      "authorizationState(address,bytes32):(bool)",
      [
        ethereum.Value.fromAddress(authorizer),
        ethereum.Value.fromFixedBytes(nonce)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  blocklister(): Address {
    let result = super.call("blocklister", "blocklister():(address)", []);

    return result[0].toAddress();
  }

  try_blocklister(): ethereum.CallResult<Address> {
    let result = super.tryCall("blocklister", "blocklister():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  configureMinter(minter: Address, minterAllowedAmount: BigInt): boolean {
    let result = super.call(
      "configureMinter",
      "configureMinter(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(minter),
        ethereum.Value.fromUnsignedBigInt(minterAllowedAmount)
      ]
    );

    return result[0].toBoolean();
  }

  try_configureMinter(
    minter: Address,
    minterAllowedAmount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "configureMinter",
      "configureMinter(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(minter),
        ethereum.Value.fromUnsignedBigInt(minterAllowedAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  currency(): string {
    let result = super.call("currency", "currency():(string)", []);

    return result[0].toString();
  }

  try_currency(): ethereum.CallResult<string> {
    let result = super.tryCall("currency", "currency():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, decrement: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(decrement)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    decrement: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(decrement)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  increaseAllowance(spender: Address, increment: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(increment)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    increment: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(increment)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isBlocklisted(_account: Address): boolean {
    let result = super.call("isBlocklisted", "isBlocklisted(address):(bool)", [
      ethereum.Value.fromAddress(_account)
    ]);

    return result[0].toBoolean();
  }

  try_isBlocklisted(_account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isBlocklisted",
      "isBlocklisted(address):(bool)",
      [ethereum.Value.fromAddress(_account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isMinter(account: Address): boolean {
    let result = super.call("isMinter", "isMinter(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_isMinter(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isMinter", "isMinter(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mint(_to: Address, _amount: BigInt): boolean {
    let result = super.call("mint", "mint(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBoolean();
  }

  try_mint(_to: Address, _amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("mint", "mint(address,uint256):(bool)", [
      ethereum.Value.fromAddress(_to),
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  minterAdmin(): Address {
    let result = super.call("minterAdmin", "minterAdmin():(address)", []);

    return result[0].toAddress();
  }

  try_minterAdmin(): ethereum.CallResult<Address> {
    let result = super.tryCall("minterAdmin", "minterAdmin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  minterAllowance(minter: Address): BigInt {
    let result = super.call(
      "minterAllowance",
      "minterAllowance(address):(uint256)",
      [ethereum.Value.fromAddress(minter)]
    );

    return result[0].toBigInt();
  }

  try_minterAllowance(minter: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minterAllowance",
      "minterAllowance(address):(uint256)",
      [ethereum.Value.fromAddress(minter)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(owner: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pauser(): Address {
    let result = super.call("pauser", "pauser():(address)", []);

    return result[0].toAddress();
  }

  try_pauser(): ethereum.CallResult<Address> {
    let result = super.tryCall("pauser", "pauser():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  removeMinter(minter: Address): boolean {
    let result = super.call("removeMinter", "removeMinter(address):(bool)", [
      ethereum.Value.fromAddress(minter)
    ]);

    return result[0].toBoolean();
  }

  try_removeMinter(minter: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("removeMinter", "removeMinter(address):(bool)", [
      ethereum.Value.fromAddress(minter)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  rescuer(): Address {
    let result = super.call("rescuer", "rescuer():(address)", []);

    return result[0].toAddress();
  }

  try_rescuer(): ethereum.CallResult<Address> {
    let result = super.tryCall("rescuer", "rescuer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, value: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, value: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BlocklistCall extends ethereum.Call {
  get inputs(): BlocklistCall__Inputs {
    return new BlocklistCall__Inputs(this);
  }

  get outputs(): BlocklistCall__Outputs {
    return new BlocklistCall__Outputs(this);
  }
}

export class BlocklistCall__Inputs {
  _call: BlocklistCall;

  constructor(call: BlocklistCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BlocklistCall__Outputs {
  _call: BlocklistCall;

  constructor(call: BlocklistCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class CancelAuthorizationCall extends ethereum.Call {
  get inputs(): CancelAuthorizationCall__Inputs {
    return new CancelAuthorizationCall__Inputs(this);
  }

  get outputs(): CancelAuthorizationCall__Outputs {
    return new CancelAuthorizationCall__Outputs(this);
  }
}

export class CancelAuthorizationCall__Inputs {
  _call: CancelAuthorizationCall;

  constructor(call: CancelAuthorizationCall) {
    this._call = call;
  }

  get authorizer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nonce(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get v(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class CancelAuthorizationCall__Outputs {
  _call: CancelAuthorizationCall;

  constructor(call: CancelAuthorizationCall) {
    this._call = call;
  }
}

export class ConfigureMinterCall extends ethereum.Call {
  get inputs(): ConfigureMinterCall__Inputs {
    return new ConfigureMinterCall__Inputs(this);
  }

  get outputs(): ConfigureMinterCall__Outputs {
    return new ConfigureMinterCall__Outputs(this);
  }
}

export class ConfigureMinterCall__Inputs {
  _call: ConfigureMinterCall;

  constructor(call: ConfigureMinterCall) {
    this._call = call;
  }

  get minter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get minterAllowedAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConfigureMinterCall__Outputs {
  _call: ConfigureMinterCall;

  constructor(call: ConfigureMinterCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get decrement(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get increment(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get tokenName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get tokenSymbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get tokenCurrency(): string {
    return this._call.inputValues[2].value.toString();
  }

  get tokenDecimals(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get newMinterAdmin(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get newPauser(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get newBlocklister(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get newRescuer(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get newOwner(): Address {
    return this._call.inputValues[8].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class ReceiveWithAuthorizationCall extends ethereum.Call {
  get inputs(): ReceiveWithAuthorizationCall__Inputs {
    return new ReceiveWithAuthorizationCall__Inputs(this);
  }

  get outputs(): ReceiveWithAuthorizationCall__Outputs {
    return new ReceiveWithAuthorizationCall__Outputs(this);
  }
}

export class ReceiveWithAuthorizationCall__Inputs {
  _call: ReceiveWithAuthorizationCall;

  constructor(call: ReceiveWithAuthorizationCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get validAfter(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get validBefore(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get nonce(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get v(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }
}

export class ReceiveWithAuthorizationCall__Outputs {
  _call: ReceiveWithAuthorizationCall;

  constructor(call: ReceiveWithAuthorizationCall) {
    this._call = call;
  }
}

export class RemoveMinterCall extends ethereum.Call {
  get inputs(): RemoveMinterCall__Inputs {
    return new RemoveMinterCall__Inputs(this);
  }

  get outputs(): RemoveMinterCall__Outputs {
    return new RemoveMinterCall__Outputs(this);
  }
}

export class RemoveMinterCall__Inputs {
  _call: RemoveMinterCall;

  constructor(call: RemoveMinterCall) {
    this._call = call;
  }

  get minter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveMinterCall__Outputs {
  _call: RemoveMinterCall;

  constructor(call: RemoveMinterCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RescueERC20Call extends ethereum.Call {
  get inputs(): RescueERC20Call__Inputs {
    return new RescueERC20Call__Inputs(this);
  }

  get outputs(): RescueERC20Call__Outputs {
    return new RescueERC20Call__Outputs(this);
  }
}

export class RescueERC20Call__Inputs {
  _call: RescueERC20Call;

  constructor(call: RescueERC20Call) {
    this._call = call;
  }

  get tokenContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RescueERC20Call__Outputs {
  _call: RescueERC20Call;

  constructor(call: RescueERC20Call) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class TransferWithAuthorizationCall extends ethereum.Call {
  get inputs(): TransferWithAuthorizationCall__Inputs {
    return new TransferWithAuthorizationCall__Inputs(this);
  }

  get outputs(): TransferWithAuthorizationCall__Outputs {
    return new TransferWithAuthorizationCall__Outputs(this);
  }
}

export class TransferWithAuthorizationCall__Inputs {
  _call: TransferWithAuthorizationCall;

  constructor(call: TransferWithAuthorizationCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get validAfter(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get validBefore(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get nonce(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get v(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }
}

export class TransferWithAuthorizationCall__Outputs {
  _call: TransferWithAuthorizationCall;

  constructor(call: TransferWithAuthorizationCall) {
    this._call = call;
  }
}

export class UnBlocklistCall extends ethereum.Call {
  get inputs(): UnBlocklistCall__Inputs {
    return new UnBlocklistCall__Inputs(this);
  }

  get outputs(): UnBlocklistCall__Outputs {
    return new UnBlocklistCall__Outputs(this);
  }
}

export class UnBlocklistCall__Inputs {
  _call: UnBlocklistCall;

  constructor(call: UnBlocklistCall) {
    this._call = call;
  }

  get _account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UnBlocklistCall__Outputs {
  _call: UnBlocklistCall;

  constructor(call: UnBlocklistCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateBlocklisterCall extends ethereum.Call {
  get inputs(): UpdateBlocklisterCall__Inputs {
    return new UpdateBlocklisterCall__Inputs(this);
  }

  get outputs(): UpdateBlocklisterCall__Outputs {
    return new UpdateBlocklisterCall__Outputs(this);
  }
}

export class UpdateBlocklisterCall__Inputs {
  _call: UpdateBlocklisterCall;

  constructor(call: UpdateBlocklisterCall) {
    this._call = call;
  }

  get _newBlocklister(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateBlocklisterCall__Outputs {
  _call: UpdateBlocklisterCall;

  constructor(call: UpdateBlocklisterCall) {
    this._call = call;
  }
}

export class UpdateMinterAdminCall extends ethereum.Call {
  get inputs(): UpdateMinterAdminCall__Inputs {
    return new UpdateMinterAdminCall__Inputs(this);
  }

  get outputs(): UpdateMinterAdminCall__Outputs {
    return new UpdateMinterAdminCall__Outputs(this);
  }
}

export class UpdateMinterAdminCall__Inputs {
  _call: UpdateMinterAdminCall;

  constructor(call: UpdateMinterAdminCall) {
    this._call = call;
  }

  get _newMinterAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateMinterAdminCall__Outputs {
  _call: UpdateMinterAdminCall;

  constructor(call: UpdateMinterAdminCall) {
    this._call = call;
  }
}

export class UpdatePauserCall extends ethereum.Call {
  get inputs(): UpdatePauserCall__Inputs {
    return new UpdatePauserCall__Inputs(this);
  }

  get outputs(): UpdatePauserCall__Outputs {
    return new UpdatePauserCall__Outputs(this);
  }
}

export class UpdatePauserCall__Inputs {
  _call: UpdatePauserCall;

  constructor(call: UpdatePauserCall) {
    this._call = call;
  }

  get _newPauser(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdatePauserCall__Outputs {
  _call: UpdatePauserCall;

  constructor(call: UpdatePauserCall) {
    this._call = call;
  }
}

export class UpdateRescuerCall extends ethereum.Call {
  get inputs(): UpdateRescuerCall__Inputs {
    return new UpdateRescuerCall__Inputs(this);
  }

  get outputs(): UpdateRescuerCall__Outputs {
    return new UpdateRescuerCall__Outputs(this);
  }
}

export class UpdateRescuerCall__Inputs {
  _call: UpdateRescuerCall;

  constructor(call: UpdateRescuerCall) {
    this._call = call;
  }

  get newRescuer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateRescuerCall__Outputs {
  _call: UpdateRescuerCall;

  constructor(call: UpdateRescuerCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
